class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int dp[m][n];

        // Initialize the bottom row of dp with matrix values
        for (int i = 0; i < n; ++i) {
            dp[m-1][i] = matrix[m-1][i];
        }
    

        for(int level=m-2; level>=0; level--){
            for(int i=0; i<n; i++){

                int best = dp[level+1][i];

                if(i == 0){
                    best = min(best,dp[level+1][i+1]);
                }
                else if(i == n-1){
                    best = min(best,dp[level+1][i-1]);
                }
                else{
                    best = min(best,dp[level+1][i+1]);
                    best = min(best,dp[level+1][i-1]);
                }
                
                dp[level][i] = matrix[level][i] + best;
            }
        }

        // now getting the minimum value on the top of our dp matrix

        int min = dp[0][0];

        for(int i=0;i<n;i++){
            if(dp[0][i] < min){
                min = dp[0][i];
            }
        }

        return min;
    }
};
