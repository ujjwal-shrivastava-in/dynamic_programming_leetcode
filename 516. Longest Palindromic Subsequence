class Solution {
public:
    int longestCommonSubsequence(string a,string b,int i,int j,vector<vector<int>>& dp){
        // This one recursion was giving memory limit exceeded
        if(i == a.length() || j == b.length()){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int ans = 0;
        if(a[i] == b[j]){
            ans =  1 + longestCommonSubsequence(a,b,i+1,j+1,dp);
        }else{
            ans = max(longestCommonSubsequence(a,b,i,j+1,dp),
                        longestCommonSubsequence(a,b,i+1,j,dp));
        }

        return dp[i][j] = ans;
    }

    int bottomUpApproach(string a,string b){
        vector<vector<int>> dp(a.length()+1, vector<int>(b.length()+1, 0));

        for(int i = a.length()-1;i>=0;i--){
            for(int j = b.length()-1;j>=0;j--){
                int ans = 0;
                if(a[i] == b[j]){
                    ans =  1 + dp[i+1][j+1];
                }else{
                    ans = max(dp[i][j+1],dp[i+1][j]);
                }

                dp[i][j] = ans;
            }
        }

        return dp[0][0];
    }
    
    int longestPalindromeSubseq(string s) {
        int n = s.length();

        string rev = s;
        reverse(rev.begin(),rev.end());
        
        // vector<vector<int>> dp(n, vector<int>(n, -1));
        // return longestCommonSubsequence(s,rev,0,0,dp);

        return bottomUpApproach(s,rev);
    }
};
